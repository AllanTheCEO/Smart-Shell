<code>#!/bin/bash</code></pre>
<p>Or</p>
<pre><code>#!/usr/bin/env bash</code></pre>
<pre><code># ---------------------------------------------------------------------------
# new_script - Bash shell script template generator

# Copyright 2012-2021, William Shotts &lt;bshotts@users.sourceforge.net&gt;

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License at &lt;http://www.gnu.org/licenses/&gt; for
# more details.

# Usage: new_script [[-h|--help]
#        new_script [-q|--quiet] [-s|--root] [script]]

# Revision history:
# 2021-04-02  Updated to new coding standard (3.5)
# 2019-05-09  Added support for shell scripting libraries (3.4)
# 2015-09-14  Minor cleanups suggested by Shellcheck (3.3)
# 2014-01-21  Minor formatting corrections (3.2)
# 2014-01-12  Various cleanups (3.1)
# 2012-05-14  Created
# ---------------------------------------------------------------------------</code></pre>
<pre><code>PROGNAME=${0##*/}</code></pre>
<p>This value is useful for such things as help and error messages. In the example above, the name of the program is calculated from the first word on the command line that invoked the script (<code>$0</code>) with any leading path name stripped off. By calculating it this way, if the name of the script file ever changes, the constant will automatically contain the new name.</p>
<p>The second constant that should be included contains the script’s version number. Like the <code>PROGNAME</code> constant, this value is useful in help and error messages.</p>
<pre><code>VERSION=&quot;3.5&quot;</code></pre>
<pre><code>func_b {

  local v1=&quot;$1&quot;
  local v2=&quot;$2&quot;

  command1
  command2
  return
}</code></pre>
<pre><code>printf &quot;A really long string follows here: %s\n&quot; \
  &quot;Some really, really, really long string.&quot;</code></pre>
<pre><code># Use long option names to improve readability

rsync \
  --archive \
  --delete-excluded \
  --rsh=ssh \
  --one-file-system \
  --relative \
  --include-from=&quot;$INCLUDE_FILE&quot; \
  --exclude-from=&quot;$EXCLUDE_FILE&quot; \
  &quot;$SOURCE&quot; &quot;$DESTINATION&quot;</code></pre>
<pre><code># Short pipeline on one line

command1 | command2

# Long pipeline on multiple lines

command1 \
  | command2 \
  | command3 \
  | command4</code></pre>
<pre><code># &#39;then&#39; should appear on the same line as &#39;if&#39;

if [[ -r ~/.bashrc ]]; then
  echo &quot;.bashrc is readable.&quot;
else
  echo &quot;.bashrc is not readable.&quot; &gt;&amp;2
  exit 1
fi

# Likewise, &#39;do&#39; should appear on the same line as
# the &#39;while&#39;, &#39;until&#39;, and &#39;for&#39; commands

while [[ -z &quot;$str&quot; ]]; do
  command1
  command2
done

for i in 1 2 3 4 5; do
  command1
  command2
done

# In a case statement, simple one-line commands can be
# formatted this way:

case s in
  1|one)
    command1 ;;
  2|two)
    command2 ;;
  3|three)
    command3 ;;
  *)
    command4 ;;
esac

# Multiple commands should be formatted this way

case s in
  1|one)
    command1
    command2
    ;;
  2|two)
    command3
    command4
    ;;
  3|three)
    command5
    command6
    ;;
  *)
    command7
    ;;
esac

# Logical compound commands using &amp;&amp; and ||

command1 &amp;&amp; short_command
command2 \
  || long_command &quot;$param1&quot; &quot;$param2&quot; &quot;$param3&quot;</code></pre>
<pre><code># TODO Fix this routine so it can do this better</code></pre>
<p>These comments begin with the string <code>TODO</code> so they can be found easily using a text editor’s search feature.</p>
<h4 id="shell-builtins-vs.external-programs">Shell Builtins vs. External Programs</h4>
<p>Where possible, use bash builtins rather than external commands. For example, the <code>basename</code> and <code>dirname</code> programs can be replaced by parameter expansions to strip leading or trailing strings from pathnames. Compared to external programs, shell builtins use fewer resources and execute much faster.</p>
<h4 id="variable-expansion-and-quoting">Variable Expansion and Quoting</h4>
<p>Double quotes must be used to manage word splitting during parameter expansion. This is particularly important when working with filenames. Assume that every variable, parameter expansion, and command substitution may contain embedded spaces, newlines, etc. There are situations where quoting is not needed (for example, within <code>[[ ... ]]</code>) but we use double quotes anyway, because it doesn’t hurt anything and it’s easier to always quote variables than remembering all the special cases where it is not required.</p>
<pre><code>a=&quot;$var&quot;
b=&quot;$1&quot;
c=&quot;$(command1)&quot;
command2 &quot;$file1&quot; &quot;$file2&quot;
[[ -z &quot;$str&quot; ]] || exit 1</code></pre>
<pre><code>a=&quot;Compat&quot;
port=&quot;bably condit&quot;
echo &quot;${a}bility is pro${port}ional to desire.&quot;</code></pre>
<pre><code># To prevent filesnames beginning with `-` from being interpreted
# as command options, always do this:
command1 ./*.txt

# Not this:
command1 *.txt</code></pre>
<pre><code># This will sanitize &#39;$pathname&#39;
[[ &quot;$pathname&quot; =~ ^[./].*$ ]] || pathname=&quot;./$pathname&quot;</code></pre>
<pre><code># Use (( ... )) rather than [[ ... ]] when evaluating integers
if (( i &gt; 1 )); then
  ...
fi

while (( y == 5 )); do
  ...
done

# Perform arithmetic assignment
(( y = x * 2 ))

# Perform expansion on an arithmetic calculation
echo $(( i * 7 ))</code></pre>
<pre><code> error_exit() {

   local error_message=&quot;$1&quot;

   printf &quot;%s\n&quot; &quot;${PROGNAME}: ${error_message:-&quot;Unknown Error&quot;}&quot; &gt;&amp;2
   exit 1
 }</code></pre>
<pre><code> command1 || error_exit &quot;command1 failed in line $LINENO&quot;</code></pre>
<p>The shell variable <code>LINENO</code> is included in the error message passed to the function. This will contain the line number where the error occurred.</p></li>
<li><p><strong>Clean up the mess.</strong> When we handle an error we need to make sure that we leave the system in good shape. If the script creates temporary files or performs some operation that could leave the system in an undesirable state, provide a way to return the system to useful condition before the script exits.</p></li>
</ol>
<p>Bash offers a setting that will to attempt handle errors automatically, which simply means that with this setting enabled, a script will terminate if any command (with some necessary exceptions) returns a non-zero exit status. To invoke this setting, we place the command <code>set -e</code> near the beginning of the script. Several bash coding standards insist on using this feature along with a couple of related settings, <code>set -u</code> which terminates a script if there is an uninitialized variable, and <code>set -o PIPEFAIL</code> which causes script termination if any element in a pipeline fails.</p>
<p>Using these features is not recommended. It is better to design proper error handling and not rely on <code>set -e</code> as a substitute for good coding practices.</p>
<p>The <em>Bash FAQ #105</em> provides the following opinion on this:</p>
<blockquote>
<p><code>set -e</code> was an attempt to add “automatic error detection” to the shell. Its goal was to cause the shell to abort any time an error occurred, so you don’t have to put <code>|| exit 1</code> after each important command.</p>
</blockquote>
<blockquote>
<p>That goal is non-trivial, because many commands intentionally return non-zero. For example,</p>
</blockquote>
<blockquote>
<p><code>if [ -d /foo ]; then ...; else ...; fi</code></p>
</blockquote>
<blockquote>
<p>Clearly we don’t want to abort when the <code>[ -d /foo ]</code> command returns non-zero (because the directory does not exist) – our script wants to handle that in the else part. So the implementors decided to make a bunch of special rules, like “commands that are part of an if test are immune”, or “commands in a pipeline, other than the last one, are immune.”</p>
</blockquote>
<blockquote>
<p>These rules are extremely convoluted, and they still fail to catch even some remarkably simple cases. Even worse, the rules change from one Bash version to another, as bash attempts to track the extremely slippery POSIX definition of this “feature.” When a subshell is involved, it gets worse still – the behavior changes depending on whether bash is invoked in POSIX mode.</p>
</blockquote>
<h4 id="command-line-options-and-arguments">Command Line Options and Arguments</h4>
<p>When possible, scripts should support both short and long option names. For example, a “help” feature should be supported by both the <code>-h</code> and <code>--help</code> options. Dual options can be implemented with code such as this:</p>
<pre><code># Parse command line
while [[ -n &quot;$1&quot; ]]; do
  case $1 in
    -h | --help)
      help_message
      graceful_exit
      ;;
    -q | --quiet)
      quiet_mode=yes
      ;;
    -s | --root)
      root_mode=yes
      ;;
    --* | -*)
      usage &gt; &amp;2; error_exit &quot;Unknown option $1&quot;
      ;;
    *)
      tmp_script=&quot;$1&quot;
      break
      ;;
  esac
  shift
done</code></pre>
<pre><code># Usage message - separate lines for mutually exclusive options
# the way many man pages do it.
usage() {
  printf &quot;%s\n&quot; \
    &quot;Usage: ${PROGNAME} [-h|--help ]&quot;
  printf &quot;%s\n&quot; \
    &quot;       ${PROGNAME} [-q|--quiet] [-s|--root] [script]&quot;
}

help_message() {
  cat &lt;&lt;- _EOF_
  ${PROGNAME} ${VERSION}
  Bash shell script template generator.

  $(usage)

  Options:

  -h, --help    Display this help message and exit.
  -q, --quiet   Quiet mode. No prompting. Outputs default script.
  -s, --root    Output script requires root privileges to run.

_EOF_
}</code></pre>
<pre><code># Trap signals
trap &quot;signal_exit TERM&quot; TERM HUP
trap &quot;signal_exit INT&quot;  INT</code></pre>
<pre><code>signal_exit() { # Handle trapped signals

  local signal=&quot;$1&quot;

  case &quot;$signal&quot; in
    INT)
      error_exit &quot;Program interrupted by user&quot;
      ;;
    TERM)
      printf &quot;\n%s\n&quot; &quot;$PROGNAME: Program terminated&quot; &gt;&amp;2
      graceful_exit
      ;;
    *)
      error_exit &quot;$PROGNAME: Terminating on unknown signal&quot;
      ;;
  esac
}</code></pre>
<pre><code># Rather than this:
command1 &gt; &quot;$TEMPFILE&quot;
.
.
.
command2 &lt; &quot;$TEMPFILE&quot;

# Consider this:
command2 &lt; &lt;(command1)</code></pre>
<pre><code>TEMPFILE=&quot;$(mktemp /tmp/&quot;$PROGNAME&quot;.$$.XXXXXXXXX)&quot;</code></pre>
<p>In this example, a temporary file will be created in the <code>/tmp</code> directory with the name consisting of the script’s name followed by its process ID (PID) and 10 random characters.</p>
<p>For temporary files belonging to a regular user, the <code>/tmp</code> directory should be avoided in favor of the user’s home directory.</p>
<h4 id="shellcheck-is-your-friend">ShellCheck is Your Friend</h4>
<p>There is a program available in most distribution repositories called <code>shellcheck</code> that performs analysis of shell scripts and will detect many kinds of faults and poor scripting practices. It is well worth using it to check the quality of scripts. To use it with a script that has a shebang, we simply do this:</p>
<pre><code>shellcheck my_script</code></pre>
<pre><code>shellcheck -s bash my_library</code></pre>
<p>Use the <code>-s</code> option to specify the desired shell dialect. More information about ShellCheck can be found at its website <a href="http://www.shellcheck.net" class="uri">http://www.shellcheck.net</a>.</p>
<h2 id="summing-up">Summing Up</h2>
<p>We covered a lot of ground in this adventure, specifying a complete set of technical and stylistic features. Using this coding standard, we can now write some serious production-quality scripts. However, the complexity of this standard does impose some cost in terms of development time and effort.</p>
<p>In Part 2, we will examine a program from LinuxCommand.org called <code>new_script</code>, a bash script template generator that will greatly facilitate writing scripts that conform to our new coding standard.</p>
<h2 id="further-reading">Further Reading</h2>
<p>Here are some links to shell scripting coding standards. They range from the lax to the obsessive. Reading them all is a good idea in order to get a sense of the community’s collective wisdom. Many are not bash-specific and some emphasize multi-shell portability, not necessarily a useful goal.</p>
<ul>
<li><p><em>The Google Shell Style Guide</em> The coding standard for scripts developed at Google. It’s among the most sensible standards. <a href="https://google.github.io/styleguide/shellguide.html" class="uri">https://google.github.io/styleguide/shellguide.html</a></p></li>
<li><p><em>Anyone Can Write Good Bash (with a little effort)</em> <a href="https://blog.yossarian.net/2020/01/23/Anybody-can-write-good-bash-with-a-little-effort" class="uri">https://blog.yossarian.net/2020/01/23/Anybody-can-write-good-bash-with-a-little-effort</a></p></li>
<li><p><em>Some Bash coding conventions and good practices</em> <a href="https://github.com/icy/bash-coding-style" class="uri">https://github.com/icy/bash-coding-style</a></p></li>
<li><p><em>Bash Style Guide and Coding Standard</em> <a href="https://lug.fh-swf.de/vim/vim-bash/StyleGuideShell.en.pdf" class="uri">https://lug.fh-swf.de/vim/vim-bash/StyleGuideShell.en.pdf</a></p></li>
<li><p><em>Shell Script Standards</em> <a href="https://engineering.vokal.io/Systems/sh.md.html" class="uri">https://engineering.vokal.io/Systems/sh.md.html</a></p></li>
<li><p><em>Unix/Linux Shell Script Programming Conventions and Style</em> <a href="http://teaching.idallen.com/cst8177/13w/notes/000_script_style.html" class="uri">http://teaching.idallen.com/cst8177/13w/notes/000_script_style.html</a></p></li>
<li><p><em>Scripting Standards</em> <a href="http://ronaldbradford.com/blog/scripting-standards/" class="uri">http://ronaldbradford.com/blog/scripting-standards/</a></p></li>
</ul>
<p>Pages with advice on coding practices. Some have conflicting advice so <em>caveat emptor</em>.</p>
<ul>
<li><p><em>Make Linux/Unix Script Portable With <code>#!/usr/bin/env</code> As a Shebang</em> <a href="https://www.cyberciti.biz/tips/finding-bash-perl-python-portably-using-env.html" class="uri">https://www.cyberciti.biz/tips/finding-bash-perl-python-portably-using-env.html</a></p></li>
<li><p><em>Good practices for writing shell scripts</em> <a href="http://www.yoone.eu/articles/2-good-practices-for-writing-shell-scripts.html" class="uri">http://www.yoone.eu/articles/2-good-practices-for-writing-shell-scripts.html</a></p></li>
<li><p><em>Why is <code>printf</code> better than <code>echo</code>?</em> <a href="https://unix.stackexchange.com/questions/65803/why-is-printf-better-than-echo" class="uri">https://unix.stackexchange.com/questions/65803/why-is-printf-better-than-echo</a></p></li>
<li><p><em>Why doesn’t <code>set -e</code> (or <code>set -o errexit</code>, or <code>trap ERR</code>) do what I expected?</em> <a href="http://mywiki.wooledge.org/BashFAQ/105" class="uri">http://mywiki.wooledge.org/BashFAQ/105</a></p></li>
<li><p><em>Bash: Error handling</em> <a href="https://fvue.nl/wiki/Bash:_Error_handling" class="uri">https://fvue.nl/wiki/Bash:_Error_handling</a></p></li>
<li><p><em>Writing Robust Bash Shell Scripts</em> <a href="https://www.davidpashley.com/articles/writing-robust-shell-scripts/" class="uri">https://www.davidpashley.com/articles/writing-robust-shell-scripts/</a></p></li>
<li><p><em>Filenames and Pathnames in Shell: How to do it Correctly</em> A good page full of cautionary tales and advice on dealing with “funny” file and path names. A serious problem in Unix-like systems. Highly recommended. <a href="https://dwheeler.com/essays/filenames-in-shell.html" class="uri">https://dwheeler.com/essays/filenames-in-shell.html</a></p></li>
<li><p><em>1963 Timesharing: A Solution to Computer Bottlenecks</em> This YouTube video from MIT provides some historical perspective on the invention of interactive systems and the transition away from batch processing. The concepts presented here are still the basis of all modern computing. <a href="https://youtu.be/Q07PhW5sCEk" class="uri">https://youtu.be/Q07PhW5sCEk</a></p></li>
</ul>


    <div class="pagenav">
      <a
      href="lc3_adv_standards.php.html#top">Top</a> | <a
      href="lc3_adv_source.php.html">Previous</a> | <a
      href="lc3_adventures.php.html#contents">Contents</a> | <a
      href="lc3_adv_new_script.php.html">Next</a>
    </div>
<div class="footer">
<hr>
<p class="fineprint">
&copy; 2000-2025,
<a href="mailto:bshotts@users.sourceforge.net">William E. Shotts, Jr.</a>
Verbatim copying and distribution of this entire article is
permitted in any medium, provided this copyright notice is preserved.</p>
<p class="fineprint">Linux&reg; is a registered trademark of Linus Torvalds.</p>
</div><!-- footer -->
</div><!-- main -->
</div><!-- grid-container -->
</body>

</html>